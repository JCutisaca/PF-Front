The payment gateway flow can be a bit complex, but I'll break it down for you step by step, and I'll also point out what you need to do differently in your frontend code. I'll explain the flow using Mercado Pago as an example.

Here's a high-level overview of how a payment gateway typically works:

1. **Frontend Initiation**:
   - In your frontend, when a user decides to make a payment (e.g., by clicking a "Checkout" button), you need to send the list of products or items they want to purchase to your backend.

2. **Backend Preparation**:
   - Your backend receives the list of products from the frontend (as you are doing in `postPurchase`).

3. **Payment Gateway Integration**:
   - Your backend then communicates with the payment gateway (in this case, Mercado Pago) to create an order or payment request. This step usually involves sending a request to the payment gateway's API with details about the order, such as the items to purchase and the amount.

4. **Payment Gateway Response**:
   - The payment gateway responds with a unique payment URL or an order ID.

5. **Frontend Redirection**:
   - Your backend sends this response (payment URL or order ID) back to the frontend.

6. **User Redirection**:
   - In your frontend, you redirect the user to the payment URL received from the payment gateway. Alternatively, you can create a button or link that leads the user to the payment gateway's page to complete the payment.

7. **User Payment**:
   - The user follows the link or is redirected to the payment gateway's page, where they can complete the payment using their preferred payment method (credit card, PayPal, etc.).

8. **Payment Confirmation**:
   - After the user successfully completes the payment on the payment gateway's page, the payment gateway notifies your backend about the payment status.

9. **Backend Confirmation**:
   - Your backend receives the payment confirmation from the payment gateway, which includes details like the payment status, order ID, and other relevant information.

10. **Order Fulfillment**:
    - Depending on the payment status (usually "approved" for successful payments), your backend can then mark the order as paid and proceed with order fulfillment (e.g., sending digital goods, shipping physical products, etc.).

Now, let's address what you need to do differently in your frontend code:

1. **In your `PaymentState` component**:
   - You should call your `postPurchase` action to initiate the payment flow when the payment status is "approved." However, make sure you are redirecting the user to the payment URL provided by the payment gateway (Mercado Pago) or their page, where they can complete the payment.

2. **Redirecting to Mercado Pago**:
   - To redirect the user to Mercado Pago's payment page, you need to use the payment URL provided by Mercado Pago in their response. You can use `window.location.href` or a similar method to redirect the user to that URL. This URL should be the one where the user can complete the payment.

3. **Handling Payment Confirmation**:
   - After the user completes the payment on Mercado Pago's page, Mercado Pago will send a notification to your backend with the payment status. Your backend should handle this notification and update the order status accordingly.

4. **Cleaning the Cart**:
   - You can dispatch the `cleanCart` action after successfully initiating the payment, but it's typically done after confirming the payment's success in the backend.

Make sure to review Mercado Pago's documentation thoroughly for integration details, as they may have specific requirements and APIs for handling payments.

In summary, the key points are to redirect the user to the payment gateway's page for payment and handle payment confirmation in your backend. The frontend should primarily initiate the payment and handle the user's interaction with the payment gateway.